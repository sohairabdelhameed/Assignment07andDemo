using Demo.Encapsulation;
using Demo.Inheritance;

namespace Demo
{
    internal class Program
    {
        static void Main(string[] args)
        {
            #region Encupsulation
            //parameter less constructor
            //Employee Emp01 = new Employee();

            //Console.WriteLine(Emp01);

            //Employee Emp02 = new Employee(10,"sohair",2000);

            // Console.WriteLine(Emp02);

            // Emp02.Id = 20; // Set Id Directly throught the Attribute

            // Console.WriteLine(Emp02.Id); // Get Id Directly throught the Attribute

            // //Emp02.Name = "Morad"; Invalid Sense the Name Attribute is private

            // Console.WriteLine(Emp02.GetName());// we get the name using the GetName method

            // Console.WriteLine("Using the Set Function and then getting New name");
            // Emp02.SetName("Morad Abdelhameed"); //we set the name using the setName method

            // Console.WriteLine(Emp02.GetName());

            //// Emp02.salary = 1000; Invalid
            //Emp02.Salary = 3000;
            // Console.WriteLine(Emp02.Salary);
            // //Recomended => As It Easy To Use Like the Attribute

            // Emp02.Age = 30;

            //Employee Emp02 = new Employee(10, "sohair", 3000, 24);
            //Console.WriteLine(Emp02);
            //Console.WriteLine("--------------------------------");
            //Console.WriteLine(Emp02.Deduction);

            //Employee Emp03 = new Employee(20, "Morad", 9000, 20);
            //Console.WriteLine(Emp03);
            //Console.WriteLine("--------------------------------");
            //Console.WriteLine(Emp03.Deduction);
            #endregion


            #region PhoneBook
            //PhoneBook Note = new PhoneBook(3); //3 pages

            //Note.AddPerson(0, "Sohair", 123);
            //Note.AddPerson(1, "Morad", 453);
            //Note.AddPerson(2, "Malak", 903);

            //Using Getter

            //int PhoneNumber = Note.GetPersonNumbers("Morad");
            //Console.WriteLine(PhoneNumber == -1 ? "Not Found": PhoneNumber);

            //int PhoneNumber2 = Note.GetPersonNumbers("S");
            //Console.WriteLine(PhoneNumber2 == -1 ? "Not Found" : PhoneNumber2);

            ////Using Setter
            //Note.SetPersonNumber("Sohair", 909); //Set the Number using the Setter
            //Console.WriteLine(Note.GetPersonNumbers("Sohair")); //Get the Number using the Getter

            //Using the Indexer
            //Console.WriteLine("------ Using the Indexer -----");
            //Note["Morad"] = 777; //Using the Indexer as Setter
            //Console.WriteLine(Note["Morad"]); //Using the Indexer as a Getter

            //To print the Note deal with is as An array with for loop:

            //for(int i = 0; i <Note.Size; i++)
            //{
            //    Console.WriteLine(Note[i]); //We will create and use a new indexer
            //}

            //Note: 
            //string Name = "Aliaa";
            //Console.WriteLine(Name[0]); //A

            ////Name[0] = 'Z' //Invalid 
            ////Indexer of String is Get Only

            #endregion

            #region CarClass

            // Car C1;
            // Declare Refrence From type "Car";
            // Can Refer To an Object From Type "Car";
            // Or An object from Class [Inherting from Car];
            // CLR Will Allocate 4 bytes for Refrence "C1" At stack
            // Zero bytes Allocated at the Heap

            // C1 = new Car(); //Parameterless constructor generated by compiler by default

            //Console.WriteLine(C1);

            //Car C1 = new Car(10,"BMW",290);

            //Console.WriteLine(C1);

            //Console.WriteLine("-----00000000-----");

            //Car C2 = new Car(20, "BYD");

            //Console.WriteLine(C2);

            //Console.WriteLine("-----00000000-----");

            //Car C3 = new Car(30);

            //Console.WriteLine(C3);

            #endregion

            #region Inheritance
            Parent P = new Parent(1,2);

            Console.WriteLine($"P = {P}");

            Console.WriteLine($"Product = {P.Product()}");


            Child C = new Child(9, 3, 3 );

            Console.WriteLine($"C  {C}");//Inhertied from Parent

            Console.WriteLine($"Product = {C.Product()}");//inhertied from parent



            #endregion



        }
    }
}
